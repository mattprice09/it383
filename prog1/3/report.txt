	Piping is a great means of passing data between two related processes. It is used commonly in C programs to provide the means of communicating to parent and child processes.
	The way it works in C is that the user simply calls `pipe()` with an int pointer of 2 elements as its parameter. If successful, then the pipe is readable and writable. There are two ends to the pipe, with the reading end being the first element in the pointer, and the writing end being the second element in the pointer. For example, if you call `int mypipe[2]; pipe(mypipe);` then, if successful, you can now write to the pipe at `mypipe[1]` and read from the pipe by using `mypipe[0]`. 
	The C `write()` call is the lowest-level C API call for the system call of write. It accepts a file descriptor, a message, and the message length as its parameters.
	The C `close()` call is also the lowest level of its kind. It simply accepts as file descriptor as a parameter and will then close that file (or pipe end).
